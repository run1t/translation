<?xml version="1.0" encoding="UTF-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file original="bem-method/method/bem-for-js/bem-for-js.en.md"
    source-language="en" target-language="fr" datatype="markdown">
    <header>
      <skl>
        <external-file href="translation/methodology/bem-for-js/bem-for-js.skl"/>
      </skl>
    </header>
    <body>
<trans-unit id="1">
  <source xml:lang="en">JavaScript for BEM</source>
  <target xml:lang="fr">JavaScript pour BEM</target>
</trans-unit>
<trans-unit id="2">
  <source xml:lang="en">In the BEM methodology, JavaScript is used for making a webpage “come alive” and is considered one of the block <bpt id="l2">[</bpt>implementation technologies<ept id="l2">]</ept><bpt id="l3">(</bpt>../key-concepts/key-concepts.en.md#implementation-technology<ept id="l3">)</ept>.</source>
  <target xml:lang="fr">Dans la méthodologie BEM, JavaSrcript est utilisé pour faire "vivre" un page web et est considéré comme un bloc des  <bpt id="l2">[</bpt>technologies d'implémentations<ept id="l2">]</ept><bpt id="l3">(</bpt>../key-concepts/key-concepts.fr.md#implementation-technology<ept id="l3">)</ept>. </target>
</trans-unit>
<trans-unit id="3">
  <source xml:lang="en">BEM enforces <bpt id="l2">[</bpt>additional rules<ept id="l2">]</ept><bpt id="l3">(</bpt>../bem-js-principles/bem-js-principles.en.md<ept id="l3">)</ept> on JavaScript that help to apply all the concepts of the component approach of the BEM methodology.</source>
  <target xml:lang="fr">BEM impose <bpt id="l2">[</bpt>des règles aditionelles<ept id="l2">]</ept><bpt id="l3">(</bpt>../bem-js-principles/bem-js-principles.fr.md<ept id="l3">)</ept> sur Javascript qui aident à l'application des concepts de la méthodologie BEM.</target>
</trans-unit>
<trans-unit id="4">
  <source xml:lang="en">Basic principles of the component approach in JavaScript for BEM</source>
  <target xml:lang="fr">Les principes de base de l'approche composant en JavaScript pour BEM</target>
</trans-unit>
<trans-unit id="5">
  <source xml:lang="en">JavaScript is one of the block implementation technologies, so the main concepts of the BEM methodology can be observed when working with JavaScript:</source>
  <target xml:lang="fr">JavaScript est un bloc des technologies d'implémentations, donc les principaux concepts de la méthodologie BEM sont observé lorque l'on travaille avec JavaScript:</target>
</trans-unit>
<trans-unit id="6">
  <source xml:lang="en"><bpt id="l1">[</bpt>Unified subject domain<ept id="l1">]</ept><bpt id="l2">(</bpt>#unified-subject-domain<ept id="l2">)</ept> — using blocks, elements, and modifiers named according to general <bpt id="l3">[</bpt>naming conventions<ept id="l3">]</ept><bpt id="l4">(</bpt>../naming-convention/naming-convention.en.md<ept id="l4">)</ept>.</source>
  <target xml:lang="fr"><bpt id="l1">[</bpt>Unified subject domain<ept id="l1">]</ept><bpt id="l2">(</bpt>#unified-subject-domain<ept id="l2">)</ept> — utilisation des blocs, éléments, et modifieurs nommés en accord avec les <bpt id="l3">[</bpt>conventions de nommages<ept id="l3">]</ept><bpt id="l4">(</bpt>../naming-convention/naming-convention.fr.md<ept id="l4">)</ept>.</target>
</trans-unit>
<trans-unit id="7">
  <source xml:lang="en"><bpt id="l1">[</bpt>Separating the code into parts<ept id="l1">]</ept><bpt id="l2">(</bpt>#dividing-the-code-into-parts<ept id="l2">)</ept> and the same <bpt id="l3">[</bpt>rules for organizing the file structure of a BEM project<ept id="l3">]</ept><bpt id="l4">(</bpt>../filesystem/filesystem.en.md<ept id="l4">)</ept>.</source>
  <target xml:lang="fr"><bpt id="l1">[</bpt>Séparation du code en plusieurs parties<ept id="l1">]</ept><bpt id="l2">(</bpt>#dividing-the-code-into-parts<ept id="l2">)</ept> et les mêmes <bpt id="l3">[</bpt> règles d'organisation des fichiers d'un projet BEM<ept id="l3">]</ept><bpt id="l4">(</bpt>../filesystem/filesystem.fr.md<ept id="l4">)</ept>.</target>
</trans-unit>
<trans-unit id="8">
  <source xml:lang="en"><bpt id="l1">[</bpt>Dividing the code by redefinition levels and using assembly<ept id="l1">]</ept><bpt id="l2">(</bpt>#working-with-redefinition-levels<ept id="l2">)</ept>.</source>
  <target xml:lang="fr"><bpt id="l1">[</bpt>Diviser le code par niveaux de redéfintion <ept id="l1">]</ept><bpt id="l2">(</bpt>#working-with-redefinition-levels<ept id="l2">)</ept>.</target>
</trans-unit>
<trans-unit id="9">
  <source xml:lang="en">Unified subject domain</source>
  <target xml:lang="fr"></target>
</trans-unit>
<trans-unit id="10">
  <source xml:lang="en">In web development, the final product (such as a webpage) consists of different technologies (HTML, CSS, JS, and so on).</source>
  <target xml:lang="fr">En dévelopemment web, le produit final (tel qu'une page web) est constitué de différentes technologies (HTML, CSS, JS ...).</target>
</trans-unit>
<trans-unit id="11">
  <source xml:lang="en">In BEM, working with all these technologies uses the same terminology and implementation approaches.</source>
  <target xml:lang="fr">Avec BEM, toutes ces technologies utilisent la même terminologie et la même aproche pour l'implémentation.</target>
</trans-unit>
<trans-unit id="12">
  <source xml:lang="en">This means that the entire team of a BEM project gets a unified language for communication, operating in terms of blocks, elements, and modifiers.</source>
  <target xml:lang="fr">Ce qui signifie que l'équipe d'un projet BEM communiquera avec le même language, en opérants en terme de bloc, éléments, et mdofieurs.</target>
</trans-unit>
<trans-unit id="13">
  <source xml:lang="en">So the JavaScript implementation of blocks doesn’t use the concepts of DOM elements, but uses the next level of abstraction — the <bpt id="l2">[</bpt>BEM tree<ept id="l2">]</ept><bpt id="l3">(</bpt>../key-concepts/key-concepts.en.md#bem-tree<ept id="l3">)</ept>.</source>
  <target xml:lang="fr">Donc l'implémentation JavaScript des blocs n'utilisent pas le concept de d'élémént du DOM, mais utilise le niveau d'abstraction supérieur - l'<bpt id="l2">[</bpt>arbre BEM<ept id="l2">]</ept><bpt id="l3">(</bpt>../key-concepts/key-concepts.fr.md#bem-tree<ept id="l3">)</ept>.</target>
</trans-unit>
<trans-unit id="14">
  <source xml:lang="en">The advantage to this is we don’t rely on classes, and can independently describe the behavior of blocks and their optional elements.</source>
  <target xml:lang="fr">L'avantage à ça est que nous ne comptons pas sur les classes, et nous pouvons décrire le comportement des blocs et ces éléments optionels indépendamment.</target>
</trans-unit>
<trans-unit id="15">
  <source xml:lang="en">In JavaScript, modifiers are used for expressing the logic of a block or element (similar to CSS, where modifiers are used for defining appearance).</source>
  <target xml:lang="fr">En JavaScript, les modifieurs sont utilisé pour exprimé la logique des blocs ou éléments (similaire au CSS, où les modifieurs sont utilisé pour définir l'apparence).</target>
</trans-unit>
<trans-unit id="16">
  <source xml:lang="en">The behavior of blocks and elements is described in JavaScript as a set of states.</source>
  <target xml:lang="fr">Le comportement des blocs et des élements est décris en JavaScript comme un ensemble d'états.</target>
</trans-unit>
<trans-unit id="17">
  <source xml:lang="en">Using the same concepts in all the technologies means we can implement various helpers in JavaScript for working with components and avoid hard coding the names of blocks and separators.</source>
  <target xml:lang="fr">L'utilisation des mêmes concepts avec toutes les technologies signifie que nous pouvons implémenter divers "helpers" pour travailler avec les composants et évite de coder en dur les noms des blocs et des séparateurs.</target>
</trans-unit>
<trans-unit id="18">
  <source xml:lang="en">This approach allows us to, for example, find all the elements with a particular name within the scope of a block, set a modifier for them, and check its value.</source>
  <target xml:lang="fr">Cette approche nous permet de, par exemple, trouver tout les éléments avec un nom particulier dans le scope du bloc, leurs appliquer appliquer un modifieur et vérifier leurs valeurs.</target>
</trans-unit>
<trans-unit id="19">
  <source xml:lang="en"><bpt id="1">**</bpt>Example<ept id="1">**</ept></source>
  <target xml:lang="fr"><bpt id="1">**</bpt>Exemple<ept id="1">**</ept></target>
</trans-unit>
<trans-unit id="20">
  <source xml:lang="en">Let’s take the example of a popup window (<bpt id="2">`</bpt>popup<ept id="2">`</ept>).</source>
  <target xml:lang="fr">Prenons l'exemple d'un popup (<bpt id="2">`</bpt>popup<ept id="2">`</ept>).</target>
</trans-unit>
<trans-unit id="21">
  <source xml:lang="en">There are several ways to show a popup window:</source>
  <target xml:lang="fr">Il y a plusieurs moyen d'afficher un popup:</target>
</trans-unit>
<trans-unit id="22">
  <source xml:lang="en">Use the common solution of adding the appropriate class.</source>
  <target xml:lang="fr">Une des solutions classique serait d'ajouter la classe approprié.</target>
</trans-unit>
<trans-unit id="23">
  <source xml:lang="en">This method isn’t necessarily convenient, because you have to hard code the block name.</source>
  <target xml:lang="fr">Cette method n'est pas forcément très pratique, puisque vous avez besoin de coder le nom du bloc en dur.</target>
</trans-unit>
<trans-unit id="24">
  <source xml:lang="en">Use BEM principles and operate not in classes, but in blocks, elements, and modifiers.</source>
  <target xml:lang="fr">Utiliser les principes de BEM, en opérant non pas par classes, mais par blocs, éléments et modifieurs.</target>
</trans-unit>
<trans-unit id="25">
  <source xml:lang="en">In this case, a component is searched for not by the class, but by the name of the block, which can be identified in the project not only by a class, but also by a tag, attribute, and so on.</source>
  <target xml:lang="fr">Dans ce cas, le composant est cherché non pas par classe, mais par le nom du bloc, qui peut être identifé dans le projet non seulement par une classe, mais aussi par un tag, un attribut etc...</target>
</trans-unit>
<trans-unit id="26">
  <source xml:lang="en">Displaying the popup window (switching the <bpt id="2">`</bpt>popup<ept id="2">`</ept> block to the <bpt id="4">`</bpt>visible<ept id="4">`</ept> state) is also performed using a modifier, not a class.</source>
  <target xml:lang="fr">L'affichage de la pop-up (changer le block <bpt id="2">`</bpt>popup<ept id="2">`</ept> en l'état <bpt id="4">`</bpt>visible<ept id="4">`</ept>) est aussi réalisé grace a un modifieur, et non a une classe.)</target>
</trans-unit>
<trans-unit id="27">
  <source xml:lang="en"><bpt id="1">**</bpt>Important!<ept id="1">**</ept> Examples written for the BEM methodology use pseudocode.</source>
  <target xml:lang="fr"><bpt id="1">**</bpt>Important!<ept id="1">**</ept> Les exemples écrits pour la méthodologie utilisent du pseudocode.</target>
</trans-unit>
<trans-unit id="28">
  <source xml:lang="en">Real implementation examples are provided in the documentation for <bpt id="l2">[</bpt>i-bem.js<ept id="l2">]</ept><bpt id="l3">(</bpt>https://en.bem.info/technology/i-bem/v2/i-bem-js/<ept id="l3">)</ept> .</source>
  <target xml:lang="fr">La vrai implémantion des examples est fournie dans la documenation de  <bpt id="l2">[</bpt>i-bem.js<ept id="l2">]</ept><bpt id="l3">(</bpt>https://en.bem.info/technology/i-bem/v2/i-bem-js/<ept id="l3">)</ept> .</target>
</trans-unit>
<trans-unit id="29">
  <source xml:lang="en">Using a unified subject domain makes it possible to interact with components at a higher level.</source>
  <target xml:lang="fr">L'utilisation d'un "unified subject domain" rend possible l'intéraction entre les différents composants à un niveau plsu élévé.</target>
</trans-unit>
<trans-unit id="30">
  <source xml:lang="en">Working with modifiers</source>
  <target xml:lang="fr">Travailler avec les modifieurs</target>
</trans-unit>
<trans-unit id="31">
  <source xml:lang="en">Modifiers can set specific states for blocks.</source>
  <target xml:lang="fr">Les modifieurs peuvent paramétrer des états spécifiques des blocs.</target>
</trans-unit>
<trans-unit id="32">
  <source xml:lang="en">The block logic is implemented in JavaScript and described using states.</source>
  <target xml:lang="fr">La logique d'un bloc est implémenté en JavaScript et décris l'utilisation des états.</target>
</trans-unit>
<trans-unit id="33">
  <source xml:lang="en">A block can be switched to another state by setting or removing a modifier.</source>
  <target xml:lang="fr">Un bloc peut changer d'état en changeant un modifieur ou en supprimant un modifieur.</target>
</trans-unit>
<trans-unit id="34">
  <source xml:lang="en">The change to the modifier creates an event that can be used for working with the block.</source>
  <target xml:lang="fr">Le changement d'un modifieur créer un événement qui peut être utilisé pour travaillé avec le bloc.</target>
</trans-unit>
<trans-unit id="35">
  <source xml:lang="en">For example, to select a checkbox, you need to set the <bpt id="2">`</bpt>checked<ept id="2">`</ept> modifier to <bpt id="4">`</bpt>true<ept id="4">`</ept> for the <bpt id="6">`</bpt>checkbox<ept id="6">`</ept> block.</source>
  <target xml:lang="fr">Par exemple, pour séléctionner une checkbox, vous avez besoin de configurer le modifieur <bpt id="2">`</bpt>checked<ept id="2">`</ept> à <bpt id="4">`</bpt>true<ept id="4">`</ept> pour le bloc <bpt id="6">`</bpt>checkbox<ept id="6">`</ept>.</target>
</trans-unit>
<trans-unit id="36">
  <source xml:lang="en">In a BEM project, you can’t change the states in runtime by using modifiers and directly changing the CSS class on the corresponding DOM node.</source>
  <target xml:lang="fr">Dans un projet BEM, vous ne pouvez pas changer les états durant l'execution en utilisant les modifieurs et en changeant directement les classes correspondantes sur le noeud du DOM.</target>
</trans-unit>
<trans-unit id="37">
  <source xml:lang="en">For the JavaScript to work correctly, all actions with modifiers must be performed using helper methods.</source>
  <target xml:lang="fr">Pour que le JavaScript fonctionne correctement, toutes les actions que les mofifieurs doivent faire utlise des "helpers".</target>
</trans-unit>
<trans-unit id="38">
  <source xml:lang="en">For implementation examples, see the documentation for <bpt id="l2">[</bpt>i-bem.js<ept id="l2">]</ept><bpt id="l3">(</bpt>https://en.bem.info/technology/i-bem/current/i-bem-js-mods/<ept id="l3">)</ept>.</source>
  <target xml:lang="fr">Pour des examples d'implémentation, regarder la documentation pour <bpt id="l2">[</bpt>i-bem.js<ept id="l2">]</ept><bpt id="l3">(</bpt>https://en.bem.info/technology/i-bem/current/i-bem-js-mods/<ept id="l3">)</ept>.</target>
</trans-unit>
<trans-unit id="39">
  <source xml:lang="en">Response to changes in modifiers</source>
  <target xml:lang="fr">Réponses au changement des modifieurs</target>
</trans-unit>
<trans-unit id="40">
  <source xml:lang="en">Switching a block from one state to another often causes changes in its appearance.</source>
  <target xml:lang="fr">Changer létat d'un bloc en un autre change, dans la plus part des cas, son apparence.</target>
</trans-unit>
<trans-unit id="41">
  <source xml:lang="en">If the CSS uses a modifier to define the block’s appearance, changing the block state called by the same modifier will automatically apply all the necessary styles.</source>
  <target xml:lang="fr">Si le CSS utilise un modifieur pour définir l'apparence d'un block, changer l'état du bloc appelé par le même modifieur appliquera automatique la style nécessaire.</target>
</trans-unit>
<trans-unit id="42">
  <source xml:lang="en">In BEM, the response to setting or removing a modifier is described <bpt id="l2">[</bpt>declaratively<ept id="l2">]</ept><bpt id="l3">(</bpt>../bem-js-principles/bem-js-principles.en.md#declarative-style<ept id="l3">)</ept>.</source>
  <target xml:lang="fr">Avec BEM, la réponse à une modification ou à la suppresion d'un modifieur est décrite <bpt id="l2">[</bpt>déclarativement<ept id="l2">]</ept><bpt id="l3">(</bpt>../bem-js-principles/bem-js-principles.fr.md#declarative-style<ept id="l3">)</ept>.</target>
</trans-unit>
<trans-unit id="43">
  <source xml:lang="en">So, for example, if an additional class (or modifier) appears in the CSS during execution, all of this modifier’s properties are automatically applied to the DOM node of this class.</source>
  <target xml:lang="fr">Donc, par exemple, si une classe aditionelle (ou un modifieur) apparait durant l'éxecution du css, toutes les propriétées de ce modifieur seront automatiquement appliqué au noeud du DOM de cette classe.</target>
</trans-unit>
<trans-unit id="44">
  <source xml:lang="en">The same thing occurs in JavaScript: if a modifier appears (a new class is added to the DOM node), the entire functionality of this modifier is applied.</source>
  <target xml:lang="fr">La même chose ce passe en JavaScript: si un modifieur apparait (une nouvelle classe est ajouté au noeud du DOM), l'ensemble des fonctionnalités de cet modifieur sont appliqués.</target>
</trans-unit>
<trans-unit id="45">
  <source xml:lang="en">If the modifier disappears, the functionality is disabled.</source>
  <target xml:lang="fr">Si un modifieur disparrait, les fonctionalités sont désactivés.</target>
</trans-unit>
<trans-unit id="46">
  <source xml:lang="en">To dynamically change the states of blocks and elements, we use special methods for setting and removing modifiers.</source>
  <target xml:lang="fr">Pour changer l'état d'un bloc et d'un élément dynamiquement, nous utilisons des méthodes spéciales pour modifier ou supprimer des modifieurs.</target>
</trans-unit>
<trans-unit id="47">
  <source xml:lang="en">For implementation examples, see the documentation for <bpt id="l2">[</bpt>i-bem.js<ept id="l2">]</ept><bpt id="l3">(</bpt>https://en.bem.info/technology/i-bem/v2/i-bem-js-mods/<ept id="l3">)</ept> .</source>
  <target xml:lang="fr">Pour des exemples d'implémentation, regarder la documentation pour  <bpt id="l2">[</bpt>i-bem.js<ept id="l2">]</ept><bpt id="l3">(</bpt>https://en.bem.info/technology/i-bem/v2/i-bem-js-mods/<ept id="l3">)</ept> .</target>
</trans-unit>
<trans-unit id="48">
  <source xml:lang="en"><bpt id="1">**</bpt>Example<ept id="1">**</ept></source>
  <target xml:lang="fr"><bpt id="1">**</bpt>Exemple<ept id="1">**</ept></target>
</trans-unit>
<trans-unit id="49">
  <source xml:lang="en">Let’s look at a form for sending a message.</source>
  <target xml:lang="fr">Regardons un formulaire d'envoi de message.</target>
</trans-unit>
<trans-unit id="50">
  <source xml:lang="en">The following condition should be met: if an invalid email is entered, the Send button (the <bpt id="2">`</bpt>button<ept id="2">`</ept> block) is inactive (it gets the <bpt id="4">`</bpt>button_disabled<ept id="4">`</ept> modifier).</source>
  <target xml:lang="fr">Les conditions suivantes sont requises: si un email invalid est entré, le bouton Envoyé (le bloc <bpt id="2">`</bpt>button<ept id="2">`</ept> ) est inactif (le modifieur <bpt id="4">`</bpt>button_disabled<ept id="4">`</ept> est appliqué).</target>
</trans-unit>
<trans-unit id="51">
  <source xml:lang="en">We could hard code all the conditions and continuously check it.</source>
  <target xml:lang="fr">Nous pourions coder toute les conditions en dur et continuellement les vérifier.</target>
</trans-unit>
<trans-unit id="52">
  <source xml:lang="en">This approach is inconvenient because any change will require manual changes to the code.</source>
  <target xml:lang="fr">Cette approche n'est pas très pratique puisque pour toute modifications nous devons changer le code. </target>
</trans-unit>
<trans-unit id="53">
  <source xml:lang="en">We could declare the block behavior and get the ability to override each modifier separately on a new redefinition level.</source>
  <target xml:lang="fr">Nous pourrions déclarer le comportement du bloc et avoir la possibilité d' "overrider" chaque modifieur séparrement sur un nouveau niveau de redéfinition.</target>
</trans-unit>
<trans-unit id="54">
  <source xml:lang="en">The <bpt id="l2">[</bpt>declaration<ept id="l2">]</ept><bpt id="l3">(</bpt>https://en.bem.info/technology/i-bem/current/i-bem-js-decl/<ept id="l3">)</ept> can specify which block or element should respond to modifier changes.</source>
  <target xml:lang="fr">La <bpt id="l2">[</bpt>déclaration<ept id="l2">]</ept><bpt id="l3">(</bpt>https://en.bem.info/technology/i-bem/current/i-bem-js-decl/<ept id="l3">)</ept> peut spécifier quel bloc ou élément devrait répondre au changement du modifeur.</target>
</trans-unit>
<trans-unit id="55">
  <source xml:lang="en">This approach allows us to:</source>
  <target xml:lang="fr">Cette approche nous permet de:</target>
</trans-unit>
<trans-unit id="56">
  <source xml:lang="en">Respond to the modifier regardless of how it was installed or removed (via the JavaScript API: <bpt id="2">`</bpt>block(&#39;button&#39;).setMod(&#39;focused&#39;)<ept id="2">`</ept> or the user set/removed the focus with the cursor).</source>
  <target xml:lang="fr">Répondre au modifieur indépendament de comment il a été mis en place ou supprimé (via l'API JavaScript: <bpt id="2">`</bpt>block(&#39;button&#39;).setMod(&#39;focused&#39;)<ept id="2">`</ept> ou via l'action de l'utisateur de mettre son curseur sur le chmap du formulaire.) </target>
</trans-unit>
<trans-unit id="57">
  <source xml:lang="en">Define the appearance for each state by adding styles to the modifier.</source>
  <target xml:lang="fr">Définir l'apparence de chaque états en ajoutant des styles au modifieur.</target>
</trans-unit>
<trans-unit id="58">
  <source xml:lang="en">Change or completely override the behavior of the block using <bpt id="l2">[</bpt>redefinition levels<ept id="l2">]</ept><bpt id="l3">(</bpt>#working-with-redefinition-levels<ept id="l3">)</ept> .</source>
  <target xml:lang="fr">Changer ou remplacer le comportement d'un bloc en utilisant les <bpt id="l2">[</bpt>niveaux de redéfinition<ept id="l2">]</ept><bpt id="l3">(</bpt>#working-with-redefinition-levels<ept id="l3">)</ept>.</target>
</trans-unit>
<trans-unit id="59">
  <source xml:lang="en">Dividing the code into parts</source>
  <target xml:lang="fr">Diviser le code en plusieurs parties</target>
</trans-unit>
<trans-unit id="60">
  <source xml:lang="en">We can apply the main BEM principles for organizing and storing code to JavaScript:</source>
  <target xml:lang="fr">Nous pouvons utilisé les principaux principes de BEM pour organiser notre code JavaScript:</target>
</trans-unit>
<trans-unit id="61">
  <source xml:lang="en">Dividing code into separate parts — each block’s logic and its optional elements and modifiers are described in separate files.</source>
  <target xml:lang="fr">Diviser le code en plusieurs parties - toute la logique d'un bloc et de ses éléments et modifieurs sont décrits dans des fichiers séparés.</target>
</trans-unit>
<trans-unit id="62">
  <source xml:lang="en">JavaScript files for each component are stored according to the <bpt id="l2">[</bpt>rules for organizing the file structure<ept id="l2">]</ept><bpt id="l3">(</bpt>../filesystem/filesystem.en.md<ept id="l3">)</ept> of a BEM project.</source>
  <target xml:lang="fr">Les fichiers JavaScripts de chaque composant sont organisé en accord avec les <bpt id="l2">[</bpt>règles d'organisation des fichiers<ept id="l2">]</ept><bpt id="l3">(</bpt>../filesystem/filesystem.fr.md<ept id="l3">)</ept>d'un projet BEM.</target>
</trans-unit>
<trans-unit id="63">
  <source xml:lang="en"><bpt id="1">**</bpt>Example<ept id="1">**</ept></source>
  <target xml:lang="fr"><bpt id="1">**</bpt>Exemple<ept id="1">**</ept></target>
</trans-unit>
<trans-unit id="64">
  <source xml:lang="en">Let’s look at an example of a logo (the <bpt id="2">`</bpt>logo<ept id="2">`</ept> block) implemented in two technologies: a template and styles.</source>
  <target xml:lang="fr">Prenons l'example d'un logo (le bloc <bpt id="2">`</bpt>logo<ept id="2">`</ept> ) a été implémenté avec deux technologies: template (HTML) et styles (CSS).</target>
</trans-unit>
<trans-unit id="65">
  <source xml:lang="en">HTML implementation of the block:</source>
  <target xml:lang="fr">Implémentation HTML du bloc:</target>
</trans-unit>
<trans-unit id="66">
  <source xml:lang="en">&lt;a class=&quot;logo&quot; href=&quot;/&quot;&gt; Your awesome company&lt;/a&gt;</source>
  <target xml:lang="fr">&lt;a class=&quot;logo&quot; href=&quot;/&quot;&gt; Your awesome company&lt;/a&gt;</target>
</trans-unit>
<trans-unit id="67">
  <source xml:lang="en">CSS implementation of the block:</source>
  <target xml:lang="fr">Implémentation CSS du bloc:</target>
</trans-unit>
<trans-unit id="68">
  <source xml:lang="en">The <bpt id="2">`</bpt>logo<ept id="2">`</ept> block in the project’s file system:</source>
  <target xml:lang="fr">Le bloc <bpt id="2">`</bpt>logo<ept id="2">`</ept> dans le sytème de fichiers:</target>
</trans-unit>
<trans-unit id="69">
  <source xml:lang="en">logo/
    logo.css   # Block&#39;s appearance
    logo.tmpl  # Templates for generating the block’s HTML representation</source>
  <target xml:lang="fr">logo/
    logo.css   # Apparence du bloc
    logo.tmpl  # Template qui genére l'HTML</target>
</trans-unit>
<trans-unit id="70">
  <source xml:lang="en">Adding JavaScript functionality to the <bpt id="2">`</bpt>logo<ept id="2">`</ept> block: now clicking the logo causes an action.</source>
  <target xml:lang="fr">Ajoutons les fonctionalités JavaScript du bloc <bpt id="2">`</bpt>logo<ept id="2">`</ept>: maintenant cliquer sur le logo causera un action.</target>
</trans-unit>
<trans-unit id="71">
  <source xml:lang="en">According to the BEM methodology, the new behavior of the <bpt id="2">`</bpt>logo<ept id="2">`</ept> block will be implemented like this:</source>
  <target xml:lang="fr">Avec la méthodologie BEM, le nouveau comportement du bloc <bpt id="2">`</bpt>logo<ept id="2">`</ept> sera implémenté de cette façon:</target>
</trans-unit>
<trans-unit id="72">
  <source xml:lang="en">In a separate file.</source>
  <target xml:lang="fr">Dans un fichier séparé.</target>
</trans-unit>
<trans-unit id="73">
  <source xml:lang="en">The file name will match the block name, with the <bpt id="2">`</bpt>.js<ept id="2">`</ept> extension.</source>
  <target xml:lang="fr">Le nom du fichier devras être le même que celui du bloc, avec l'extension <bpt id="2">`</bpt>.js<ept id="2">`</ept>.</target>
</trans-unit>
<trans-unit id="74">
  <source xml:lang="en">The <bpt id="2">`</bpt>logo.js<ept id="2">`</ept> file will be located in the block’s <bpt id="4">`</bpt>logo/<ept id="4">`</ept> directory.</source>
  <target xml:lang="fr">Le fichier <bpt id="2">`</bpt>logo.js<ept id="2">`</ept> sera placé dans le répertoire <bpt id="4">`</bpt>logo/<ept id="4">`</ept> du bloc.</target>
</trans-unit>
<trans-unit id="75">
  <source xml:lang="en">JavaScript implementation of the block:</source>
  <target xml:lang="fr">Implémentation JavaScript du bloc:</target>
</trans-unit>
<trans-unit id="76">
  <source xml:lang="en">The <bpt id="2">`</bpt>logo.js<ept id="2">`</ept> file in the block’s file system:</source>
  <target xml:lang="fr">Le fichier <bpt id="2">`</bpt>logo.js<ept id="2">`</ept> dans le système de fichiers:</target>
</trans-unit>
<trans-unit id="77">
  <source xml:lang="en">logo/
    logo.css   # Apparence du bloc
    logo.tmpl  # Templates for generating the block’s HTML representation
    logo.js    # Dynamic behavior of the block in the browser</source>
  <target xml:lang="fr">logo/
    logo.css   # Block’s appearance
    logo.tmpl  # Template qui genére l'HTML
    logo.js    # Comportement du bloc dans le navigateur</target>
</trans-unit>
<trans-unit id="78">
  <source xml:lang="en">Dividing the code into parts and strictly organizing the project’s file system not only make it easier to navigate the project and reuse or migrate components, but also allow us to work with redefinition levels for JavaScript and use assembly.</source>
  <target xml:lang="fr">La division du code en plusieurs parties et l'organisation strict des fichiers ne rends pas seulement la navigation dans le projet et la réutilisation des composant plus facile, mais nous permet aussi de travailler avec la redéfinition des niveaux.</target>
</trans-unit>
<trans-unit id="79">
  <source xml:lang="en">Working with redefinition levels</source>
  <target xml:lang="fr">Travailler avec la redéfinition des niveaux</target>
</trans-unit>
<trans-unit id="80">
  <source xml:lang="en">The documentation for the BEM methodology provides <bpt id="l2">[</bpt>many examples<ept id="l2">]</ept><bpt id="l3">(</bpt>../filesystem/filesystem.en.md#examples-of-using-redefinition-levels<ept id="l3">)</ept> where the final CSS implementation of a block is assembled from different redefinition levels.</source>
  <target xml:lang="fr">La documentation de la méthodologie BEM nous fournie <bpt id="l2">[</bpt>de nombreux exemples<ept id="l2">]</ept><bpt id="l3">(</bpt>../filesystem/filesystem.fr.md#examples-of-using-redefinition-levels<ept id="l3">)</ept> ou l'implémentation CSS final du bloc est l'assemblage de plusieurs niveaux de redéfintion.</target>
</trans-unit>
<trans-unit id="81">
  <source xml:lang="en">Applying BEM principles to JavaScript allows us to similarly divide a block’s behavior into different levels:</source>
  <target xml:lang="fr">En appliquant les principes de BEM au JavaScript nous pouvons divisé le comportement d'un bloc sur différents niveaux:</target>
</trans-unit>
<trans-unit id="82">
  <source xml:lang="en">Implement new block functionality on a different redefinition level while preserving the previous block behavior, inheriting it and extending it (make a super call).</source>
  <target xml:lang="fr">L'implémentation d'une nouvelle fonctionalité à un bloc sur un niveau de redéfinition différent tout en préservant le comportement initial du block, en l'héritant et en l'étendant (faire un "super call")</target>
</trans-unit>
<trans-unit id="83">
  <source xml:lang="en">Completely override the block behavior (redefine it).</source>
  <target xml:lang="fr">Complétement remplacer le comportement d'un bloc (le redéfinir)</target>
</trans-unit>
<trans-unit id="84">
  <source xml:lang="en">Add new blocks with new functionality that didn’t exist on previous levels.</source>
  <target xml:lang="fr">Ajouté de nouveaux blocs avec des fonctionalités qui n'existe pas sur les niveaux précedent.</target>
</trans-unit>
<trans-unit id="85">
  <source xml:lang="en">Use redefinition levels to create a generic JavaScript library of blocks and change it at the project level.</source>
  <target xml:lang="fr">Utilisé la redéinition des niveaux pour créer un bibliotèque JavaScript générique de blocs et changer ces blocs au niveau du projet.</target>
</trans-unit>
<trans-unit id="86">
  <source xml:lang="en">Then use assembly and only include the necessary block behaviors in the project.</source>
  <target xml:lang="fr">Et ensuite utilisé l'assemblage des niveaux de rédifinitions pour inclure seulement les comportements de bloc nécessaire.</target>
</trans-unit>
<trans-unit id="87">
  <source xml:lang="en"><bpt id="1">**</bpt>Example<ept id="1">**</ept></source>
  <target xml:lang="fr"><bpt id="1">**</bpt>Exemple<ept id="1">**</ept></target>
</trans-unit>
<trans-unit id="88">
  <source xml:lang="en">Let’s return to the example of a form for sending a message:</source>
  <target xml:lang="fr">Reprenons l'exemple du formulaire d'envoi de message:</target>
</trans-unit>
<trans-unit id="89">
  <source xml:lang="en">BEM style allows us to:</source>
  <target xml:lang="fr">BEM nous permet de :</target>
</trans-unit>
<trans-unit id="90">
  <source xml:lang="en">Completely override the block’s behavior on a different redefinition level.</source>
  <target xml:lang="fr">Complétement remplacer le comportement du bloc sur un niveau de redéfintion diférent.</target>
</trans-unit>
<trans-unit id="91">
  <source xml:lang="en">Add or partially change the block’s behavior on a different redefinition level.</source>
  <target xml:lang="fr">Ajouter ou changer une partie du comportement du bloc sur un niveau de redéfintion différent.</target>
</trans-unit>
<trans-unit id="92">
  <source xml:lang="en">You can use a specialized framework for working with redefinition levels in BEM, such as <bpt id="l2">[</bpt>i-bem.js<ept id="l2">]</ept><bpt id="l3">(</bpt>https://en.bem.info/technology/i-bem/current/i-bem-js/<ept id="l3">)</ept>, since it was created to meet BEM requirements.</source>
  <target xml:lang="fr">Vous pouvez utiliser un framework qui prend en compte la redéfinition des niveaux in BEM, tel que <bpt id="l2">[</bpt>i-bem.js<ept id="l2">]</ept><bpt id="l3">(</bpt>https://en.bem.info/technology/i-bem/current/i-bem-js/<ept id="l3">)</ept> (spécialement créé pour répondre au exigences de BEM).</target>
</trans-unit>
<trans-unit id="93">
  <source xml:lang="en">How to switch to BEM-style JavaScript</source>
  <target xml:lang="fr">Comment passer au style BEM JavaScript</target>
</trans-unit>
<trans-unit id="94">
  <source xml:lang="en">The fastest way is to start applying the principles of the BEM methodology in your project and get your first results without using a specialized framework.</source>
  <target xml:lang="fr">Le moyen le plus rapide est de commencer appliquer les principes de la méthodologie BEM dans vos projet et voir les prémiers résultats sans utiliser de framework.</target>
</trans-unit>
<trans-unit id="95">
  <source xml:lang="en">To immediately use all the BEM concepts in your project, you need to use the <bpt id="l2">[</bpt>i-bem.js<ept id="l2">]</ept><bpt id="l3">(</bpt>https://en.bem.info/technology/i-bem/current/i-bem-js/<ept id="l3">)</ept> framework:</source>
  <target xml:lang="fr">Si vous voulez utiliser tout les concepts BEM tout de suite dans votre projet, vous aurez besoin du framework : <bpt id="l2">[</bpt>i-bem.js<ept id="l2">]</ept><bpt id="l3">(</bpt>https://en.bem.info/technology/i-bem/current/i-bem-js/<ept id="l3">)</ept></target>
</trans-unit>
<trans-unit id="96">
  <source xml:lang="en">Use the <bpt id="l2">[</bpt>unified terminology<ept id="l2">]</ept><bpt id="l3">(</bpt>#unified-subject-domain<ept id="l3">)</ept> of blocks, elements, and modifiers in all technologies.</source>
  <target xml:lang="fr">Utilise la <bpt id="l2">[</bpt>terminilogie unifiée<ept id="l2">]</ept><bpt id="l3">(</bpt>#unified-subject-domain<ept id="l3">)</ept> des blocs, éléments, and modifieurs avec toutes les technologies.</target>
</trans-unit>
<trans-unit id="97">
  <source xml:lang="en">Create independent components (blocks) at the JavaScript level.</source>
  <target xml:lang="fr">Création des composants (blocs) indépendants au niveau du JavaScript.</target>
</trans-unit>
<trans-unit id="98">
  <source xml:lang="en">Change the behavior of blocks, elements, and modifiers using redefinition levels similar to CSS.</source>
  <target xml:lang="fr">Change le comportement des blocs, élément, et modifieurs en utilisant les niveaux de redéfinitions.</target>
</trans-unit>
<trans-unit id="99">
  <source xml:lang="en">Reuse blocks and migrate them between projects.</source>
  <target xml:lang="fr">Réutilisation des blocs et migration entre les projets.</target>
</trans-unit>
<trans-unit id="100">
  <source xml:lang="en">Facilitate and accelerate project development and debugging due to components being independent, so blocks can be developed individually.</source>
  <target xml:lang="fr">Facilite et accélere le développement du projet et le débogage grace a l'indépendance des blocs, ce qui rends les blocs développable individuellement.</target>
</trans-unit>
<trans-unit id="101">
  <source xml:lang="en">Include only the necessary JavaScript implementation of a block for assembly.</source>
  <target xml:lang="fr">Inclus seulement le code nécessaire à l'implémentation du JavaScript à l'assemblage.</target>
</trans-unit>
<trans-unit id="102">
  <source xml:lang="en">Simplify navigation through the project’s file system.</source>
  <target xml:lang="fr">Simplifi la navigation dans le projet grace au système de fichiers.</target>
</trans-unit>
    </body>
 </file>
</xliff>